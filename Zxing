import org.docx4j.openpackaging.exceptions.Docx4JException;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.docx4j.openpackaging.parts.WordprocessingML.MainDocumentPart;
import org.docx4j.TraversalUtil;
import org.docx4j.finders.ClassFinder;
import org.docx4j.XmlUtils;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import javax.xml.bind.JAXBElement;
import java.io.File;
import java.util.List;

public class W14CheckboxFixer {
    
    public static void fixCheckboxes(String inputPath, String outputPath) throws Docx4JException {
        // Load the document
        WordprocessingMLPackage wordPackage = WordprocessingMLPackage.load(new File(inputPath));
        MainDocumentPart documentPart = wordPackage.getMainDocumentPart();
        
        // Method 1: Find and fix Content Control checkboxes (most common for w14)
        fixContentControlCheckboxes(documentPart);
        
        // Method 2: Find and fix using XML manipulation (for stubborn cases)
        fixCheckboxesViaXML(documentPart);
        
        // Save the document
        wordPackage.save(new File(outputPath));
        System.out.println("Checkboxes fixed and saved to: " + outputPath);
    }
    
    private static void fixContentControlCheckboxes(MainDocumentPart documentPart) {
        try {
            // Find all SdtElement (Content Controls)
            ClassFinder finder = new ClassFinder(org.docx4j.openpackaging.parts.relationships.Namespaces.CTSdtBlock.class);
            new TraversalUtil(documentPart.getContent(), finder);
            
            // Also find inline content controls
            ClassFinder inlineFinder = new ClassFinder(org.docx4j.openpackaging.parts.relationships.Namespaces.CTSdtRun.class);
            new TraversalUtil(documentPart.getContent(), inlineFinder);
            
            // Process found content controls
            List<Object> contentControls = finder.results;
            contentControls.addAll(inlineFinder.results);
            
            for (Object obj : contentControls) {
                if (isCheckboxContentControl(obj)) {
                    setContentControlCheckboxChecked(obj);
                }
            }
        } catch (Exception e) {
            System.err.println("Error fixing content control checkboxes: " + e.getMessage());
        }
    }
    
    private static boolean isCheckboxContentControl(Object sdt) {
        try {
            // Check if this is a checkbox content control
            String xml = XmlUtils.marshaltoString(sdt, true);
            return xml.contains("w14:checkbox") || xml.contains("checkbox") && xml.contains("☐");
        } catch (Exception e) {
            return false;
        }
    }
    
    private static void setContentControlCheckboxChecked(Object sdt) {
        try {
            // Get the XML representation
            org.w3c.dom.Document doc = XmlUtils.marshaltoW3CDomDocument(sdt);
            
            // Find checkbox elements in w14 namespace
            org.w3c.dom.NodeList checkboxNodes = doc.getElementsByTagNameNS(
                "http://schemas.microsoft.com/office/word/2010/wordml", "checkbox");
            
            for (int i = 0; i < checkboxNodes.getLength(); i++) {
                Element checkbox = (Element) checkboxNodes.item(i);
                
                // Find or create the checked element
                org.w3c.dom.NodeList checkedNodes = checkbox.getElementsByTagNameNS(
                    "http://schemas.microsoft.com/office/word/2010/wordml", "checked");
                
                Element checkedElement;
                if (checkedNodes.getLength() > 0) {
                    checkedElement = (Element) checkedNodes.item(0);
                } else {
                    // Create checked element if it doesn't exist
                    checkedElement = doc.createElementNS(
                        "http://schemas.microsoft.com/office/word/2010/wordml", "w14:checked");
                    checkbox.appendChild(checkedElement);
                }
                
                // Set the val attribute to 1 (checked)
                checkedElement.setAttribute("w14:val", "1");
                
                System.out.println("Checkbox set to checked");
            }
            
            // Also update the display text/symbol
            updateCheckboxSymbol(doc, true);
            
        } catch (Exception e) {
            System.err.println("Error setting checkbox checked: " + e.getMessage());
        }
    }
    
    private static void updateCheckboxSymbol(org.w3c.dom.Document doc, boolean checked) {
        try {
            // Find text nodes that contain checkbox symbols
            org.w3c.dom.NodeList textNodes = doc.getElementsByTagName("w:t");
            
            for (int i = 0; i < textNodes.getLength(); i++) {
                Node textNode = textNodes.item(i);
                String text = textNode.getTextContent();
                
                if (text.contains("☐") || text.contains("☑")) {
                    // Replace with checked or unchecked symbol
                    String newSymbol = checked ? "☑" : "☐";
                    textNode.setTextContent(newSymbol);
                    System.out.println("Updated checkbox symbol to: " + newSymbol);
                }
            }
        } catch (Exception e) {
            System.err.println("Error updating checkbox symbol: " + e.getMessage());
        }
    }
    
    private static void fixCheckboxesViaXML(MainDocumentPart documentPart) {
        try {
            // Get the raw XML
            String documentXML = XmlUtils.marshaltoString(documentPart.getJaxbElement(), true);
            
            // Replace unchecked patterns with checked ones
            // Pattern 1: w14:checked val="0" to val="1"
            documentXML = documentXML.replaceAll(
                "(<w14:checked[^>]*w14:val=\")0(\"[^>]*/>)", 
                "$11$2"
            );
            
            // Pattern 2: Add w14:checked element if missing
            documentXML = documentXML.replaceAll(
                "(<w14:checkbox[^>]*>)(?!.*<w14:checked)(.*?)(</w14:checkbox>)",
                "$1<w14:checked w14:val=\"1\"/>$2$3"
            );
            
            // Pattern 3: Replace checkbox symbols in text
            documentXML = documentXML.replaceAll("☐", "☑");
            
            // Unmarshal the modified XML back
            Object updatedElement = XmlUtils.unmarshalString(documentXML);
            documentPart.setJaxbElement(updatedElement);
            
            System.out.println("Applied XML-based checkbox fixes");
            
        } catch (Exception e) {
            System.err.println("Error in XML-based fix: " + e.getMessage());
        }
    }
    
    // Alternative method using direct namespace approach
    public static void setW14CheckboxValue(MainDocumentPart documentPart, String checkboxTag, boolean checked) {
        try {
            String documentXML = XmlUtils.marshaltoString(documentPart.getJaxbElement(), true);
            
            // Create the replacement pattern for specific checkbox
            String searchPattern = "(<w:tag[^>]*w:val=\"" + checkboxTag + "\"[^>]*/>.*?" +
                                 "<w14:checkbox[^>]*>)" +
                                 "(?:<w14:checked[^>]*/>)?" +
                                 "(.*?</w14:checkbox>)";
                                 
            String replacement = "$1<w14:checked w14:val=\"" + (checked ? "1" : "0") + "\"/>$2";
            
            documentXML = documentXML.replaceAll(searchPattern, replacement);
            
            // Update the document
            Object updatedElement = XmlUtils.unmarshalString(documentXML);
            documentPart.setJaxbElement(updatedElement);
            
        } catch (Exception e) {
            System.err.println("Error setting specific checkbox: " + e.getMessage());
        }
    }
    
    public static void main(String[] args) {
        try {
            // Example usage
            String inputFile = "input_document.docx";
            String outputFile = "output_document.docx";
            
            fixCheckboxes(inputFile, outputFile);
            
            // For specific checkbox by tag
            // WordprocessingMLPackage pkg = WordprocessingMLPackage.load(new File(outputFile));
            // setW14CheckboxValue(pkg.getMainDocumentPart(), "MyCheckboxTag", true);
            // pkg.save(new File("final_output.docx"));
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
