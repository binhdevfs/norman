import org.docx4j.openpackaging.exceptions.Docx4JException;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.docx4j.openpackaging.parts.WordprocessingML.MainDocumentPart;
import org.docx4j.TraversalUtil;
import org.docx4j.finders.ClassFinder;
import org.docx4j.XmlUtils;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import javax.xml.bind.JAXBElement;
import java.io.File;
import java.util.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class W14CheckboxFixer {
    
    // Check specific checkboxes by their identifiers
    public static void checkSpecificCheckboxes(String inputPath, String outputPath, 
                                             List<String> checkboxesToCheck) throws Docx4JException {
        WordprocessingMLPackage wordPackage = WordprocessingMLPackage.load(new File(inputPath));
        MainDocumentPart documentPart = wordPackage.getMainDocumentPart();
        
        // Check only specified checkboxes
        for (String checkboxId : checkboxesToCheck) {
            checkCheckboxById(documentPart, checkboxId, true);
        }
        
        wordPackage.save(new File(outputPath));
        System.out.println("Specified checkboxes checked and saved to: " + outputPath);
    }
    
    // Check a single checkbox by various identifiers
    public static void checkCheckboxById(MainDocumentPart documentPart, String identifier, boolean checked) {
        // Try different methods to find the checkbox
        boolean found = false;
        
        // Method 1: By content control tag
        found = checkByContentControlTag(documentPart, identifier, checked);
        
        // Method 2: By content control alias/title
        if (!found) {
            found = checkByContentControlAlias(documentPart, identifier, checked);
        }
        
        // Method 3: By content (text near checkbox)
        if (!found) {
            found = checkByNearbyText(documentPart, identifier, checked);
        }
        
        // Method 4: By index position
        if (!found && identifier.matches("\\d+")) {
            found = checkByIndex(documentPart, Integer.parseInt(identifier), checked);
        }
        
        if (found) {
            System.out.println("Checkbox '" + identifier + "' set to " + (checked ? "checked" : "unchecked"));
        } else {
            System.out.println("Checkbox '" + identifier + "' not found");
        }
    }
    
    // Method 1: Find checkbox by content control tag
    private static boolean checkByContentControlTag(MainDocumentPart documentPart, String tag, boolean checked) {
        try {
            String documentXML = XmlUtils.marshaltoString(documentPart.getJaxbElement(), true);
            
            // Look for content control with specific tag that contains checkbox
            String pattern = "(<w:sdt[^>]*>.*?<w:tag[^>]*w:val=\"" + Pattern.quote(tag) + "\"[^>]*/>.*?" +
                           "<w14:checkbox[^>]*>)" +
                           "(?:<w14:checked[^>]*/>)?" +
                           "(.*?</w14:checkbox>.*?</w:sdt>)";
            
            Pattern p = Pattern.compile(pattern, Pattern.DOTALL);
            Matcher m = p.matcher(documentXML);
            
            if (m.find()) {
                String replacement = m.group(1) + 
                                   "<w14:checked w14:val=\"" + (checked ? "1" : "0") + "\"/>" + 
                                   m.group(2);
                documentXML = m.replaceFirst(replacement);
                
                // Update checkbox symbol
                documentXML = updateCheckboxSymbolInXML(documentXML, tag, checked);
                
                Object updatedElement = XmlUtils.unmarshalString(documentXML);
                documentPart.setJaxbElement(updatedElement);
                return true;
            }
        } catch (Exception e) {
            System.err.println("Error checking by tag: " + e.getMessage());
        }
        return false;
    }
    
    // Method 2: Find checkbox by content control alias/title
    private static boolean checkByContentControlAlias(MainDocumentPart documentPart, String alias, boolean checked) {
        try {
            String documentXML = XmlUtils.marshaltoString(documentPart.getJaxbElement(), true);
            
            // Look for content control with specific alias/title
            String pattern = "(<w:sdt[^>]*>.*?<w:alias[^>]*w:val=\"" + Pattern.quote(alias) + "\"[^>]*/>.*?" +
                           "<w14:checkbox[^>]*>)" +
                           "(?:<w14:checked[^>]*/>)?" +
                           "(.*?</w14:checkbox>.*?</w:sdt>)";
            
            Pattern p = Pattern.compile(pattern, Pattern.DOTALL);
            Matcher m = p.matcher(documentXML);
            
            if (m.find()) {
                String replacement = m.group(1) + 
                                   "<w14:checked w14:val=\"" + (checked ? "1" : "0") + "\"/>" + 
                                   m.group(2);
                documentXML = m.replaceFirst(replacement);
                
                Object updatedElement = XmlUtils.unmarshalString(documentXML);
                documentPart.setJaxbElement(updatedElement);
                return true;
            }
        } catch (Exception e) {
            System.err.println("Error checking by alias: " + e.getMessage());
        }
        return false;
    }
    
    // Method 3: Find checkbox by nearby text content
    private static boolean checkByNearbyText(MainDocumentPart documentPart, String nearbyText, boolean checked) {
        try {
            String documentXML = XmlUtils.marshaltoString(documentPart.getJaxbElement(), true);
            
            // Look for text followed by checkbox within reasonable distance
            String pattern = "(<w:t[^>]*>[^<]*" + Pattern.quote(nearbyText) + "[^<]*</w:t>.*?" +
                           "<w14:checkbox[^>]*>)" +
                           "(?:<w14:checked[^>]*/>)?" +
                           "(.*?</w14:checkbox>)";
            
            Pattern p = Pattern.compile(pattern, Pattern.DOTALL);
            Matcher m = p.matcher(documentXML);
            
            if (m.find()) {
                String replacement = m.group(1) + 
                                   "<w14:checked w14:val=\"" + (checked ? "1" : "0") + "\"/>" + 
                                   m.group(2);
                documentXML = m.replaceFirst(replacement);
                
                // Update nearby checkbox symbol
                documentXML = updateNearbyCheckboxSymbol(documentXML, nearbyText, checked);
                
                Object updatedElement = XmlUtils.unmarshalString(documentXML);
                documentPart.setJaxbElement(updatedElement);
                return true;
            }
        } catch (Exception e) {
            System.err.println("Error checking by nearby text: " + e.getMessage());
        }
        return false;
    }
    
    // Method 4: Find checkbox by index (0-based)
    private static boolean checkByIndex(MainDocumentPart documentPart, int index, boolean checked) {
        try {
            String documentXML = XmlUtils.marshaltoString(documentPart.getJaxbElement(), true);
            
            Pattern checkboxPattern = Pattern.compile("<w14:checkbox[^>]*>(?:<w14:checked[^>]*/>)?(.*?)</w14:checkbox>", Pattern.DOTALL);
            Matcher m = checkboxPattern.matcher(documentXML);
            
            int currentIndex = 0;
            while (m.find()) {
                if (currentIndex == index) {
                    String replacement = "<w14:checkbox>" + 
                                       "<w14:checked w14:val=\"" + (checked ? "1" : "0") + "\"/>" + 
                                       m.group(1) + 
                                       "</w14:checkbox>";
                    documentXML = documentXML.substring(0, m.start()) + replacement + documentXML.substring(m.end());
                    
                    Object updatedElement = XmlUtils.unmarshalString(documentXML);
                    documentPart.setJaxbElement(updatedElement);
                    return true;
                }
                currentIndex++;
            }
        } catch (Exception e) {
            System.err.println("Error checking by index: " + e.getMessage());
        }
        return false;
    }
    
    // Helper method to update checkbox symbol in XML for specific tag
    private static String updateCheckboxSymbolInXML(String documentXML, String tag, boolean checked) {
        try {
            String symbol = checked ? "☑" : "☐";
            String pattern = "(<w:tag[^>]*w:val=\"" + Pattern.quote(tag) + "\"[^>]*/>.*?<w:t[^>]*>)[☐☑](</w:t>)";
            Pattern p = Pattern.compile(pattern, Pattern.DOTALL);
            return p.matcher(documentXML).replaceFirst("$1" + symbol + "$2");
        } catch (Exception e) {
            return documentXML;
        }
    }
    
    // Helper method to update checkbox symbol near specific text
    private static String updateNearbyCheckboxSymbol(String documentXML, String nearbyText, boolean checked) {
        try {
            String symbol = checked ? "☑" : "☐";
            String pattern = "(<w:t[^>]*>[^<]*" + Pattern.quote(nearbyText) + "[^<]*</w:t>.*?<w:t[^>]*>)[☐☑](</w:t>)";
            Pattern p = Pattern.compile(pattern, Pattern.DOTALL);
            return p.matcher(documentXML).replaceFirst("$1" + symbol + "$2");
        } catch (Exception e) {
            return documentXML;
        }
    }
    
    // Utility method to list all checkboxes in the document
    public static void listAllCheckboxes(String filePath) throws Docx4JException {
        WordprocessingMLPackage wordPackage = WordprocessingMLPackage.load(new File(filePath));
        MainDocumentPart documentPart = wordPackage.getMainDocumentPart();
        
        System.out.println("Found checkboxes:");
        
        try {
            String documentXML = XmlUtils.marshaltoString(documentPart.getJaxbElement(), true);
            
            // Find content control tags
            Pattern tagPattern = Pattern.compile("<w:tag[^>]*w:val=\"([^\"]*?)\"[^>]*/>.*?<w14:checkbox", Pattern.DOTALL);
            Matcher m = tagPattern.matcher(documentXML);
            int index = 0;
            while (m.find()) {
                System.out.println("  Tag: '" + m.group(1) + "' (Index: " + index + ")");
                index++;
            }
            
            // Find content control aliases
            Pattern aliasPattern = Pattern.compile("<w:alias[^>]*w:val=\"([^\"]*?)\"[^>]*/>.*?<w14:checkbox", Pattern.DOTALL);
            m = aliasPattern.matcher(documentXML);
            while (m.find()) {
                System.out.println("  Alias: '" + m.group(1) + "'");
            }
            
        } catch (Exception e) {
            System.err.println("Error listing checkboxes: " + e.getMessage());
        }
    }
    
    public static void main(String[] args) {
        try {
            String inputFile = "input_document.docx";
            String outputFile = "output_document.docx";
            
            // First, see what checkboxes are available
            System.out.println("=== Available checkboxes ===");
            listAllCheckboxes(inputFile);
            
            // Example 1: Check specific checkboxes by tag
            List<String> checkboxesToCheck = Arrays.asList("checkbox1", "checkbox3", "mySpecialCheckbox");
            checkSpecificCheckboxes(inputFile, outputFile, checkboxesToCheck);
            
            // Example 2: Check individual checkboxes by different methods
            WordprocessingMLPackage pkg = WordprocessingMLPackage.load(new File(inputFile));
            MainDocumentPart documentPart = pkg.getMainDocumentPart();
            
            // By content control tag
            checkCheckboxById(documentPart, "agreeTerms", true);
            
            // By content control alias/title
            checkCheckboxById(documentPart, "Subscribe to Newsletter", true);
            
            // By nearby text content
            checkCheckboxById(documentPart, "I agree to", true);
            
            // By index (0-based, first checkbox = 0)
            checkCheckboxById(documentPart, "0", true);  // Check first checkbox
            checkCheckboxById(documentPart, "2", false); // Uncheck third checkbox
            
            pkg.save(new File("individually_checked.docx"));
            
            // Example 3: Selective checking with map
            Map<String, Boolean> checkboxStates = new HashMap<>();
            checkboxStates.put("checkbox1", true);
            checkboxStates.put("checkbox2", false);
            checkboxStates.put("checkbox3", true);
            
            setMultipleCheckboxStates(inputFile, "map_based_output.docx", checkboxStates);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    // Helper method to set multiple checkbox states
    public static void setMultipleCheckboxStates(String inputPath, String outputPath, 
                                                Map<String, Boolean> checkboxStates) throws Docx4JException {
        WordprocessingMLPackage wordPackage = WordprocessingMLPackage.load(new File(inputPath));
        MainDocumentPart documentPart = wordPackage.getMainDocumentPart();
        
        for (Map.Entry<String, Boolean> entry : checkboxStates.entrySet()) {
            checkCheckboxById(documentPart, entry.getKey(), entry.getValue());
        }
        
        wordPackage.save(new File(outputPath));
        System.out.println("Multiple checkbox states set and saved to: " + outputPath);
    }
}
}
