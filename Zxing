import java.awt.*;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import javax.imageio.ImageIO;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;

public class QrWithRoundedCornerLogo {

    public static void generateQRCodeWithRoundedCornerLogo(String content, int size, File logoFile, File outputFile) throws Exception {
        Map<EncodeHintType, Object> hints = new HashMap<>();
        hints.put(EncodeHintType.CHARACTER_SET, "UTF-8");
        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);
        hints.put(EncodeHintType.MARGIN, 1);

        QRCodeWriter qrWriter = new QRCodeWriter();
        BitMatrix bitMatrix = qrWriter.encode(content, BarcodeFormat.QR_CODE, size, size, hints);
        BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(bitMatrix);

        if (logoFile != null && logoFile.exists()) {
            BufferedImage logo = ImageIO.read(logoFile);

            // Tính kích thước logo
            int logoMaxWidth = qrImage.getWidth() * 20 / 100;
            int logoMaxHeight = qrImage.getHeight() * 20 / 100;
            double scale = Math.min((double) logoMaxWidth / logo.getWidth(), (double) logoMaxHeight / logo.getHeight());
            int scaledWidth = (int) (logo.getWidth() * scale);
            int scaledHeight = (int) (logo.getHeight() * scale);

            // Logo bo góc
            BufferedImage roundedLogo = new BufferedImage(scaledWidth, scaledHeight, BufferedImage.TYPE_INT_ARGB);
            Graphics2D lg = roundedLogo.createGraphics();
            lg.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            int cornerRadius = scaledWidth / 5; // ~20%
            Shape roundRect = new RoundRectangle2D.Double(0, 0, scaledWidth, scaledHeight, cornerRadius, cornerRadius);
            lg.setClip(roundRect);
            lg.drawImage(logo, 0, 0, scaledWidth, scaledHeight, null);
            lg.dispose();

            Graphics2D g = qrImage.createGraphics();
            g.setComposite(AlphaComposite.SrcOver);
            g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            int x = (qrImage.getWidth() - scaledWidth) / 2;
            int y = (qrImage.getHeight() - scaledHeight) / 2;

            // Nền trắng bo góc sau logo
            g.setColor(Color.WHITE);
            g.fill(new RoundRectangle2D.Double(x - 5, y - 5, scaledWidth + 10, scaledHeight + 10, cornerRadius + 5, cornerRadius + 5));

            // Vẽ logo
            g.drawImage(roundedLogo, x, y, null);

            g.dispose();
        }

        ImageIO.write(qrImage, "PNG", outputFile);
    }

    public static void main(String[] args) throws Exception {
        generateQRCodeWithRoundedCornerLogo(
            "https://example.com",
            400,
            new File("logo.png"),
            new File("qr_logo_round_corner.png")
        );
        System.out.println("QR với logo bo góc đã tạo!");
    }
}
